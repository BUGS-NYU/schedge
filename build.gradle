plugins {
    id "java"
    id "application"
    // id "org.flywaydb.flyway" version "7.8.2"
    id 'com.avast.gradle.docker-compose' version '0.15.0'
}

mainClassName = 'Main'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// def getenv = { String env_val, default_val ->
//   ext.val = System.getenv(env_val)
//   if (ext.val == null) {
//     return default_val
//   } else return ext.val
// }

tasks.named('wrapper') {
  jarFile = "${project.projectDir}/src/build/gradle/gradle-wrapper.jar"
}


tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked"
}

// flyway {
//   driver = 'org.postgresql.Driver'
//   url = getenv("JDBC_URL", "jdbc:postgresql://localhost:5432/schedge")
//   user = getenv("DB_USERNAME", "schedge")
//   password = getenv("DB_PASSWORD", "")
//   locations = ['filesystem:src/main/migrations']
// }

repositories {
    mavenCentral()
}

dependencies {
    implementation(
            "org.slf4j:slf4j-api:1.7.25", // Logging
            "org.slf4j:slf4j-simple:1.7.30", // Logging

            "org.postgresql:postgresql:42.2.12", // Database driver
            "com.zaxxer:HikariCP:3.4.1", // Database connection pool

            "org.jsoup:jsoup:1.12.1", // HTML Parsing

            "me.tongfei:progressbar:0.8.1", // Progress bar

            "org.asynchttpclient:async-http-client-bom:2.10.5",
            "org.asynchttpclient:async-http-client:2.10.5", // Async Http Client

            "info.picocli:picocli:4.1.4", // Command line args

            "com.fasterxml.jackson.core:jackson-annotations:2.7.4", // JSON

            "io.javalin:javalin:4.3.0", // Web server framework
            "io.javalin:javalin-openapi:4.3.0", // Web server api
    )
}

// The build directory should not begin with the same name as the script
allprojects {
    buildDir = ".build"
}

// @TODO use application plugin to make a distribution instead of using
// a fat jar. Fat jars take an annoying amount of time to compile, wheras
// the distribution plugin likely won't, because it has less work to do.
//                                   - Albert Liu, Jan 31, 2022 Mon 01:34 EST
jar {
  manifest { attributes ('Main-Class': 'Main') }
  duplicatesStrategy = "include"

  dependsOn configurations.runtimeClasspath

  // This will become relevant in a little bit when we move off of flyway
  from('src/main') {
      include 'migrations/*.sql'
   }

  from {
    configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
  }
}

composeBuild.dependsOn build
dockerCompose {
  buildBeforeUp = false
  projectName = 'schedge'
}
