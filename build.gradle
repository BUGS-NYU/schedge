plugins {
    id "java"
    id "application"
    id 'nu.studer.jooq' version '4.1'
    id "org.flywaydb.flyway" version "6.2.4"
}

group 'BUGS-NYU'
mainClassName = 'Main'
sourceCompatibility = JavaVersion.VERSION_12
targetCompatibility = JavaVersion.VERSION_12

def dbUrl = "jdbc:sqlite:${buildscript.sourceFile.absoluteFile.parent}/tables.db"
def dbDriver = 'org.sqlite.JDBC'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation(
            "org.slf4j:slf4j-api:1.7.25", // Logging
            "ch.qos.logback:logback-core:1.2.3", // Logging
            "ch.qos.logback:logback-classic:1.2.3", // Logging

            "javax.annotation:javax.annotation-api:1.2-b01", // Annotations

            "org.xerial:sqlite-jdbc:3.30.1",
            // "org.postgresql:postgresql:42.2.8.jre7", // Database driver
            "com.zaxxer:HikariCP:3.4.1", // Database connection pool
            "org.jooq:jooq:3.13.1", // Database framework

            "org.jsoup:jsoup:1.12.1", // HTML Parsing

            "info.picocli:picocli:4.1.4", // Command line args
            "com.fasterxml.jackson.core:jackson-core:2.4.1", // JSON
            "com.fasterxml.jackson.core:jackson-annotations:2.4.1", // JSON
            "com.fasterxml.jackson.core:jackson-databind:2.4.1", // JSON
            "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9", // JSON

            "io.javalin:javalin:3.5.0", // Web server framework
            "io.swagger.core.v3:swagger-core:2.0.8", // Web server docs framework
    )

    jooqRuntime "org.xerial:sqlite-jdbc:3.30.1"
}

flyway {
  driver = dbDriver
  url = dbUrl
  locations = ['filesystem:migrations']
}

jooq {
  version = '3.13.1'
  edition = 'OSS'

  database(sourceSets.main) {
    jdbc {
      driver = dbDriver
      url = dbUrl
    }
    generator {
      database {
        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
        includes = '.*'
        excludes = ''
        // inputSchema = 'main'
      }

      generate {
        relations = true
        deprecated = false
        records = true
        immutablePojos = true
        fluentSetters = true
      }

      target {
        packageName = 'database.generated'
        directory = 'src/main/java'
      }
    }
  }
}

// Set up Jooq to always codegen when needed, but not any other time
project.tasks.getByName('compileJava').dependsOn -= 'generateDatabaseJooqSchemaSource'
project.tasks.getByName('generateDatabaseJooqSchemaSource').outputs.upToDateWhen { false }

// The build directory should not begin with the same name as the script
allprojects {
    buildDir = ".build"
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

// https://github.com/jorgeejgonzalez/fermat/wiki/Creating-Standalone-Jar-Using-Gradle
task fatJar(type: Jar, dependsOn: test) {
    archiveBaseName = project.name + '-with-dependencies'

    manifest {
        attributes 'Main-Class': 'Main'
    }

    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    with jar
}

// Using hack from https://vocon-it.com/2016/11/15/how-to-build-a-lean-jar-file-with-gradle/
// copy dependency jars to build/libs/dependency-jars
task copyJarsToLib(type: Copy) {
  def toDir = ".build/libs/dependency-jars"

  // create directories, if not already done:
  file(toDir).mkdirs()

  // copy jars to lib folder:
  from configurations.compileClasspath
  into toDir
}

jar {
  manifest {
    attributes (
      'Main-Class': 'Main',
      // add classpath to Manifest;
      // http://stackoverflow.com/questions/30087427/add-classpath-in-manifest-file-of-jar-in-gradle
      "Class-Path": '. dependency-jars/' + configurations.compileClasspath.collect {
        it.getName()
      }.join(' dependency-jars/')
    )
  }
}

// always call copyJarsToLib when building jars:
jar.dependsOn copyJarsToLib

task checkFast {}
checkFast.dependsOn += 'compileJava'

class UpdateDbTask extends DefaultTask {

    @InputDirectory
    String inputDirectory;

    @OutputFile
    String tables;

    UpdateDbTask() {
        outputs.upToDateWhen {
          new File(tables).exists()
        }
    }
    @TaskAction
    def update() {
    }
}

task updateDb(type: UpdateDbTask) {
  inputDirectory = "${buildscript.sourceFile.absoluteFile.parent}/migrations"
  tables = "${buildscript.sourceFile.absoluteFile.parent}/tables.db";
  doLast {
      flywayClean.runTask()
      flywayMigrate.runTask()
      generateDatabaseJooqSchemaSource.generate()
  }
}
compileJava.dependsOn += updateDb

