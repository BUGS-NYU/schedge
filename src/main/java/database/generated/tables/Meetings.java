/*
 * This file is generated by jOOQ.
 */
package database.generated.tables;


import database.generated.DefaultSchema;
import database.generated.Keys;
import database.generated.tables.records.MeetingsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Meetings extends TableImpl<MeetingsRecord> {

    private static final long serialVersionUID = -216242587;

    /**
     * The reference instance of <code>meetings</code>
     */
    public static final Meetings MEETINGS = new Meetings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeetingsRecord> getRecordType() {
        return MeetingsRecord.class;
    }

    /**
     * The column <code>meetings.id</code>.
     */
    public final TableField<MeetingsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>meetings.section_id</code>.
     */
    public final TableField<MeetingsRecord, Integer> SECTION_ID = createField(DSL.name("section_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>meetings.begin_date</code>.
     */
    public final TableField<MeetingsRecord, Timestamp> BEGIN_DATE = createField(DSL.name("begin_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>meetings.end_date</code>.
     */
    public final TableField<MeetingsRecord, Timestamp> END_DATE = createField(DSL.name("end_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>meetings.duration</code>.
     */
    public final TableField<MeetingsRecord, Long> DURATION = createField(DSL.name("duration"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>meetings</code> table reference
     */
    public Meetings() {
        this(DSL.name("meetings"), null);
    }

    /**
     * Create an aliased <code>meetings</code> table reference
     */
    public Meetings(String alias) {
        this(DSL.name(alias), MEETINGS);
    }

    /**
     * Create an aliased <code>meetings</code> table reference
     */
    public Meetings(Name alias) {
        this(alias, MEETINGS);
    }

    private Meetings(Name alias, Table<MeetingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Meetings(Name alias, Table<MeetingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Meetings(Table<O> child, ForeignKey<O, MeetingsRecord> key) {
        super(child, key, MEETINGS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<MeetingsRecord> getPrimaryKey() {
        return Keys.PK_MEETINGS;
    }

    @Override
    public List<UniqueKey<MeetingsRecord>> getKeys() {
        return Arrays.<UniqueKey<MeetingsRecord>>asList(Keys.PK_MEETINGS);
    }

    @Override
    public List<ForeignKey<MeetingsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MeetingsRecord, ?>>asList(Keys.FK_MEETINGS_SECTIONS_1);
    }

    public Sections sections() {
        return new Sections(this, Keys.FK_MEETINGS_SECTIONS_1);
    }

    @Override
    public Meetings as(String alias) {
        return new Meetings(DSL.name(alias), this);
    }

    @Override
    public Meetings as(Name alias) {
        return new Meetings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Meetings rename(String name) {
        return new Meetings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Meetings rename(Name name) {
        return new Meetings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Timestamp, Timestamp, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
